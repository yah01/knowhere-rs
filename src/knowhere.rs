/* automatically generated by rust-bindgen 0.65.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CKnowhereConfig {
    pub simd_type: *const ::std::os::raw::c_char,
    pub thread_num: u32,
}
#[test]
fn bindgen_test_layout_CKnowhereConfig() {
    const UNINIT: ::std::mem::MaybeUninit<CKnowhereConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CKnowhereConfig>(),
        16usize,
        concat!("Size of: ", stringify!(CKnowhereConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<CKnowhereConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(CKnowhereConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).simd_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CKnowhereConfig),
            "::",
            stringify!(simd_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CKnowhereConfig),
            "::",
            stringify!(thread_num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KV {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_KV() {
    const UNINIT: ::std::mem::MaybeUninit<KV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<KV>(),
        16usize,
        concat!("Size of: ", stringify!(KV))
    );
    assert_eq!(
        ::std::mem::align_of::<KV>(),
        8usize,
        concat!("Alignment of ", stringify!(KV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(KV), "::", stringify!(key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(KV), "::", stringify!(value))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBuildParams {
    pub metric_type: *const ::std::os::raw::c_char,
    pub index_params: *const KV,
    pub index_params_size: i64,
    pub row_nums: i64,
    pub dimension: i64,
    pub binary_vectors: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CBuildParams() {
    const UNINIT: ::std::mem::MaybeUninit<CBuildParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBuildParams>(),
        48usize,
        concat!("Size of: ", stringify!(CBuildParams))
    );
    assert_eq!(
        ::std::mem::align_of::<CBuildParams>(),
        8usize,
        concat!("Alignment of ", stringify!(CBuildParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metric_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBuildParams),
            "::",
            stringify!(metric_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBuildParams),
            "::",
            stringify!(index_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_params_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CBuildParams),
            "::",
            stringify!(index_params_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_nums) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CBuildParams),
            "::",
            stringify!(row_nums)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CBuildParams),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binary_vectors) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CBuildParams),
            "::",
            stringify!(binary_vectors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CIndexCtx {
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CIndexCtx() {
    const UNINIT: ::std::mem::MaybeUninit<CIndexCtx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CIndexCtx>(),
        8usize,
        concat!("Size of: ", stringify!(CIndexCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<CIndexCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(CIndexCtx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CIndexCtx),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBinarySet {
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CBinarySet() {
    const UNINIT: ::std::mem::MaybeUninit<CBinarySet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBinarySet>(),
        8usize,
        concat!("Size of: ", stringify!(CBinarySet))
    );
    assert_eq!(
        ::std::mem::align_of::<CBinarySet>(),
        8usize,
        concat!("Alignment of ", stringify!(CBinarySet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBinarySet),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSearchParams {
    pub search_params: *const KV,
    pub search_params_size: i64,
    pub query_nums: i64,
    pub dimension: i64,
    pub binary_vectors: *const ::std::os::raw::c_void,
    pub bitset_data: *const u8,
    pub bitset_length: i64,
}
#[test]
fn bindgen_test_layout_CSearchParams() {
    const UNINIT: ::std::mem::MaybeUninit<CSearchParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CSearchParams>(),
        56usize,
        concat!("Size of: ", stringify!(CSearchParams))
    );
    assert_eq!(
        ::std::mem::align_of::<CSearchParams>(),
        8usize,
        concat!("Alignment of ", stringify!(CSearchParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(search_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_params_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(search_params_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_nums) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(query_nums)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binary_vectors) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(binary_vectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitset_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(bitset_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitset_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchParams),
            "::",
            stringify!(bitset_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSearchResult {
    pub row_nums: i64,
    pub ids: *mut i64,
    pub distances: *mut f32,
}
#[test]
fn bindgen_test_layout_CSearchResult() {
    const UNINIT: ::std::mem::MaybeUninit<CSearchResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CSearchResult>(),
        24usize,
        concat!("Size of: ", stringify!(CSearchResult))
    );
    assert_eq!(
        ::std::mem::align_of::<CSearchResult>(),
        8usize,
        concat!("Alignment of ", stringify!(CSearchResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_nums) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchResult),
            "::",
            stringify!(row_nums)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ids) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchResult),
            "::",
            stringify!(ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distances) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CSearchResult),
            "::",
            stringify!(distances)
        )
    );
}
extern "C" {
    pub fn knowhere_init(config: *mut CKnowhereConfig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_build_index(
        name: *const ::std::os::raw::c_char,
        build_params: *mut CBuildParams,
        index: *mut CIndexCtx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_serialize_index(
        index: *mut CIndexCtx,
        binary: *mut CBinarySet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_deserialize_index(
        name: *const ::std::os::raw::c_char,
        binary: *mut CBinarySet,
        index: *mut CIndexCtx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_search_index(
        index: *mut CIndexCtx,
        search_params: *mut CSearchParams,
        out: *mut CSearchResult,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_destroy_index(index: *mut CIndexCtx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_destroy_binary_set(binary: *mut CBinarySet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn knowhere_destroy_search_result(result: *mut CSearchResult) -> ::std::os::raw::c_int;
}
